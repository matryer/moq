// Code generated by moq; DO NOT EDIT.
// github.com/rewardStyle/moq

package generics

import (
	"context"
	"sync"
)

// Ensure, that GenericStore1Mock does implement GenericStore1.
// If this is not the case, regenerate this file with moq.
var _ GenericStore1[Key1, any] = &GenericStore1Mock[Key1, any]{}

// GenericStore1Mock is a mock implementation of GenericStore1.
//
// 	func TestSomethingThatUsesGenericStore1(t *testing.T) {
//
// 		// make and configure a mocked GenericStore1
// 		mockedGenericStore1 := &GenericStore1Mock{
// 			CreateFunc: func(ctx context.Context, id T, value S) error {
// 				panic("mock out the Create method")
// 			},
// 			GetFunc: func(ctx context.Context, id T) (S, error) {
// 				panic("mock out the Get method")
// 			},
// 		}
//
// 		// use mockedGenericStore1 in code that requires GenericStore1
// 		// and then make assertions.
//
// 	}
type GenericStore1Mock[T Key1, S any] struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, id T, value S) error

	// GetFunc mocks the Get method.
	GetFunc func(ctx context.Context, id T) (S, error)

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID T
			// Value is the value argument value.
			Value S
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID T
		}
	}
	lockCreate sync.RWMutex
	lockGet    sync.RWMutex
}

// Create calls CreateFunc.
func (mock *GenericStore1Mock[T, S]) Create(ctx context.Context, id T, value S) error {
	if mock.CreateFunc == nil {
		panic("GenericStore1Mock.CreateFunc: method is nil but GenericStore1.Create was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		ID    T
		Value S
	}{
		Ctx:   ctx,
		ID:    id,
		Value: value,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(ctx, id, value)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedGenericStore1.CreateCalls())
func (mock *GenericStore1Mock[T, S]) CreateCalls() []struct {
	Ctx   context.Context
	ID    T
	Value S
} {
	var calls []struct {
		Ctx   context.Context
		ID    T
		Value S
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *GenericStore1Mock[T, S]) Get(ctx context.Context, id T) (S, error) {
	if mock.GetFunc == nil {
		panic("GenericStore1Mock.GetFunc: method is nil but GenericStore1.Get was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  T
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	return mock.GetFunc(ctx, id)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedGenericStore1.GetCalls())
func (mock *GenericStore1Mock[T, S]) GetCalls() []struct {
	Ctx context.Context
	ID  T
} {
	var calls []struct {
		Ctx context.Context
		ID  T
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}

// Ensure, that GenericStore2Mock does implement GenericStore2.
// If this is not the case, regenerate this file with moq.
var _ GenericStore2[[]byte, any] = &GenericStore2Mock[[]byte, any]{}

// GenericStore2Mock is a mock implementation of GenericStore2.
//
// 	func TestSomethingThatUsesGenericStore2(t *testing.T) {
//
// 		// make and configure a mocked GenericStore2
// 		mockedGenericStore2 := &GenericStore2Mock{
// 			CreateFunc: func(ctx context.Context, id T, value S) error {
// 				panic("mock out the Create method")
// 			},
// 			GetFunc: func(ctx context.Context, id T) (S, error) {
// 				panic("mock out the Get method")
// 			},
// 		}
//
// 		// use mockedGenericStore2 in code that requires GenericStore2
// 		// and then make assertions.
//
// 	}
type GenericStore2Mock[T Key2, S any] struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, id T, value S) error

	// GetFunc mocks the Get method.
	GetFunc func(ctx context.Context, id T) (S, error)

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID T
			// Value is the value argument value.
			Value S
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID T
		}
	}
	lockCreate sync.RWMutex
	lockGet    sync.RWMutex
}

// Create calls CreateFunc.
func (mock *GenericStore2Mock[T, S]) Create(ctx context.Context, id T, value S) error {
	if mock.CreateFunc == nil {
		panic("GenericStore2Mock.CreateFunc: method is nil but GenericStore2.Create was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		ID    T
		Value S
	}{
		Ctx:   ctx,
		ID:    id,
		Value: value,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(ctx, id, value)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedGenericStore2.CreateCalls())
func (mock *GenericStore2Mock[T, S]) CreateCalls() []struct {
	Ctx   context.Context
	ID    T
	Value S
} {
	var calls []struct {
		Ctx   context.Context
		ID    T
		Value S
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *GenericStore2Mock[T, S]) Get(ctx context.Context, id T) (S, error) {
	if mock.GetFunc == nil {
		panic("GenericStore2Mock.GetFunc: method is nil but GenericStore2.Get was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  T
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	return mock.GetFunc(ctx, id)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedGenericStore2.GetCalls())
func (mock *GenericStore2Mock[T, S]) GetCalls() []struct {
	Ctx context.Context
	ID  T
} {
	var calls []struct {
		Ctx context.Context
		ID  T
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}

// Ensure, that AliasStoreMock does implement AliasStore.
// If this is not the case, regenerate this file with moq.
var _ AliasStore = &AliasStoreMock{}

// AliasStoreMock is a mock implementation of AliasStore.
//
// 	func TestSomethingThatUsesAliasStore(t *testing.T) {
//
// 		// make and configure a mocked AliasStore
// 		mockedAliasStore := &AliasStoreMock{
// 			CreateFunc: func(ctx context.Context, id KeyImpl, value bool) error {
// 				panic("mock out the Create method")
// 			},
// 			GetFunc: func(ctx context.Context, id KeyImpl) (bool, error) {
// 				panic("mock out the Get method")
// 			},
// 		}
//
// 		// use mockedAliasStore in code that requires AliasStore
// 		// and then make assertions.
//
// 	}
type AliasStoreMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, id KeyImpl, value bool) error

	// GetFunc mocks the Get method.
	GetFunc func(ctx context.Context, id KeyImpl) (bool, error)

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID KeyImpl
			// Value is the value argument value.
			Value bool
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID KeyImpl
		}
	}
	lockCreate sync.RWMutex
	lockGet    sync.RWMutex
}

// Create calls CreateFunc.
func (mock *AliasStoreMock) Create(ctx context.Context, id KeyImpl, value bool) error {
	if mock.CreateFunc == nil {
		panic("AliasStoreMock.CreateFunc: method is nil but AliasStore.Create was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		ID    KeyImpl
		Value bool
	}{
		Ctx:   ctx,
		ID:    id,
		Value: value,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(ctx, id, value)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedAliasStore.CreateCalls())
func (mock *AliasStoreMock) CreateCalls() []struct {
	Ctx   context.Context
	ID    KeyImpl
	Value bool
} {
	var calls []struct {
		Ctx   context.Context
		ID    KeyImpl
		Value bool
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *AliasStoreMock) Get(ctx context.Context, id KeyImpl) (bool, error) {
	if mock.GetFunc == nil {
		panic("AliasStoreMock.GetFunc: method is nil but AliasStore.Get was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  KeyImpl
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	return mock.GetFunc(ctx, id)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedAliasStore.GetCalls())
func (mock *AliasStoreMock) GetCalls() []struct {
	Ctx context.Context
	ID  KeyImpl
} {
	var calls []struct {
		Ctx context.Context
		ID  KeyImpl
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}
