// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package genericsthirdparty

import (
	"context"
	"sync"
)

// Ensure, that GenericStoreMock does implement GenericStore.
// If this is not the case, regenerate this file with moq.
var _ GenericStore = &GenericStoreMock{}

// GenericStoreMock is a mock implementation of GenericStore.
//
//	func TestSomethingThatUsesGenericStore(t *testing.T) {
//
//		// make and configure a mocked GenericStore
//		mockedGenericStore := &GenericStoreMock{
//			CreateFunc: func(ctx context.Context, item Item[Item])  {
//				panic("mock out the Create method")
//			},
//			GetFunc: func(ctx context.Context, item Item[Item])  {
//				panic("mock out the Get method")
//			},
//		}
//
//		// use mockedGenericStore in code that requires GenericStore
//		// and then make assertions.
//
//	}
type GenericStoreMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, item Item[Item])

	// GetFunc mocks the Get method.
	GetFunc func(ctx context.Context, item Item[Item])

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Item is the item argument value.
			Item Item[Item]
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Item is the item argument value.
			Item Item[Item]
		}
	}
	lockCreate sync.RWMutex
	lockGet    sync.RWMutex
}

// Create calls CreateFunc.
func (mock *GenericStoreMock) Create(ctx context.Context, item Item[Item]) {
	if mock.CreateFunc == nil {
		panic("GenericStoreMock.CreateFunc: method is nil but GenericStore.Create was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Item Item[Item]
	}{
		Ctx:  ctx,
		Item: item,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	mock.CreateFunc(ctx, item)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//
//	len(mockedGenericStore.CreateCalls())
func (mock *GenericStoreMock) CreateCalls() []struct {
	Ctx  context.Context
	Item Item[Item]
} {
	var calls []struct {
		Ctx  context.Context
		Item Item[Item]
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *GenericStoreMock) Get(ctx context.Context, item Item[Item]) {
	if mock.GetFunc == nil {
		panic("GenericStoreMock.GetFunc: method is nil but GenericStore.Get was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Item Item[Item]
	}{
		Ctx:  ctx,
		Item: item,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	mock.GetFunc(ctx, item)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//
//	len(mockedGenericStore.GetCalls())
func (mock *GenericStoreMock) GetCalls() []struct {
	Ctx  context.Context
	Item Item[Item]
} {
	var calls []struct {
		Ctx  context.Context
		Item Item[Item]
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}
