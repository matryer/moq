// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"github.com/matryer/moq/pkg/moq/testpackages/embedtypes"
	"sync"
)

// Ensure, that Interface3Mock does implement embedtypes.Interface3.
// If this is not the case, regenerate this file with moq.
var _ embedtypes.Interface3 = &Interface3Mock{}

// Interface3Mock is a mock implementation of embedtypes.Interface3.
//
//	func TestSomethingThatUsesInterface3(t *testing.T) {
//
//		// make and configure a mocked embedtypes.Interface3
//		mockedInterface3 := &Interface3Mock{
//			ExportedMethodFunc: func()  {
//				panic("mock out the ExportedMethod method")
//			},
//		}
//
//		// use mockedInterface3 in code that requires embedtypes.Interface3
//		// and then make assertions.
//
//	}
type Interface3Mock struct {
	embedtypes.Embedded1
	*embedtypes.Embedded2

	// ExportedMethodFunc mocks the ExportedMethod method.
	ExportedMethodFunc func()

	// calls tracks calls to the methods.
	calls struct {
		// ExportedMethod holds details about calls to the ExportedMethod method.
		ExportedMethod []struct {
		}
	}
	lockExportedMethod sync.RWMutex
}

// ExportedMethod calls ExportedMethodFunc.
func (mock *Interface3Mock) ExportedMethod() {
	if mock.ExportedMethodFunc == nil {
		panic("Interface3Mock.ExportedMethodFunc: method is nil but Interface3.ExportedMethod was just called")
	}
	callInfo := struct {
	}{}
	mock.lockExportedMethod.Lock()
	mock.calls.ExportedMethod = append(mock.calls.ExportedMethod, callInfo)
	mock.lockExportedMethod.Unlock()
	mock.ExportedMethodFunc()
}

// ExportedMethodCalls gets all the calls that were made to ExportedMethod.
// Check the length with:
//
//	len(mockedInterface3.ExportedMethodCalls())
func (mock *Interface3Mock) ExportedMethodCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockExportedMethod.RLock()
	calls = mock.calls.ExportedMethod
	mock.lockExportedMethod.RUnlock()
	return calls
}
