// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package importalias

import (
	srcclient "github.com/matryer/moq/pkg/moq/testpackages/importalias/source/client"
	tgtclient "github.com/matryer/moq/pkg/moq/testpackages/importalias/target/client"
	"sync"
)

// Ensure, that MiddleManMock does implement MiddleMan.
// If this is not the case, regenerate this file with moq.
var _ MiddleMan = &MiddleManMock{}

// MiddleManMock is a mock implementation of MiddleMan.
//
//     func TestSomethingThatUsesMiddleMan(t *testing.T) {
//
//         // make and configure a mocked MiddleMan
//         mockedMiddleMan := &MiddleManMock{
//             ConnectFunc: func(src srcclient.Client, tgt tgtclient.Client)  {
// 	               panic("mock out the Connect method")
//             },
//         }
//
//         // use mockedMiddleMan in code that requires MiddleMan
//         // and then make assertions.
//
//     }
type MiddleManMock struct {
	// ConnectFunc mocks the Connect method.
	ConnectFunc func(src srcclient.Client, tgt tgtclient.Client)

	// calls tracks calls to the methods.
	calls struct {
		// Connect holds details about calls to the Connect method.
		Connect []struct {
			// Src is the src argument value.
			Src srcclient.Client
			// Tgt is the tgt argument value.
			Tgt tgtclient.Client
		}
	}
	lockConnect sync.RWMutex
}

// Connect calls ConnectFunc.
func (mock *MiddleManMock) Connect(src srcclient.Client, tgt tgtclient.Client) {
	if mock.ConnectFunc == nil {
		panic("MiddleManMock.ConnectFunc: method is nil but MiddleMan.Connect was just called")
	}
	callInfo := struct {
		Src srcclient.Client
		Tgt tgtclient.Client
	}{
		Src: src,
		Tgt: tgt,
	}
	mock.lockConnect.Lock()
	mock.calls.Connect = append(mock.calls.Connect, callInfo)
	mock.lockConnect.Unlock()
	mock.ConnectFunc(src, tgt)
}

// ConnectCalls gets all the calls that were made to Connect.
// Check the length with:
//     len(mockedMiddleMan.ConnectCalls())
func (mock *MiddleManMock) ConnectCalls() []struct {
	Src srcclient.Client
	Tgt tgtclient.Client
} {
	var calls []struct {
		Src srcclient.Client
		Tgt tgtclient.Client
	}
	mock.lockConnect.RLock()
	calls = mock.calls.Connect
	mock.lockConnect.RUnlock()
	return calls
}
