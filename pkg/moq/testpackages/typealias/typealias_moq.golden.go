// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package typealias

import (
	"github.com/matryer/moq/pkg/moq/testpackages/typealiastwo"
	"sync"
)

// Ensure, that ExampleMock does implement Example.
// If this is not the case, regenerate this file with moq.
var _ Example = &ExampleMock{}

// ExampleMock is a mock implementation of Example.
//
//	func TestSomethingThatUsesExample(t *testing.T) {
//
//		// make and configure a mocked Example
//		mockedExample := &ExampleMock{
//			DoFunc: func(a typealiastwo.AliasType, b typealiastwo.GenericAliasType) error {
//				panic("mock out the Do method")
//			},
//		}
//
//		// use mockedExample in code that requires Example
//		// and then make assertions.
//
//	}
type ExampleMock struct {
	// DoFunc mocks the Do method.
	DoFunc func(a typealiastwo.AliasType, b typealiastwo.GenericAliasType) error

	// calls tracks calls to the methods.
	calls struct {
		// Do holds details about calls to the Do method.
		Do []struct {
			// A is the a argument value.
			A typealiastwo.AliasType
			// B is the b argument value.
			B typealiastwo.GenericAliasType
		}
	}
	lockDo sync.RWMutex
}

// Do calls DoFunc.
func (mock *ExampleMock) Do(a typealiastwo.AliasType, b typealiastwo.GenericAliasType) error {
	if mock.DoFunc == nil {
		panic("ExampleMock.DoFunc: method is nil but Example.Do was just called")
	}
	callInfo := struct {
		A typealiastwo.AliasType
		B typealiastwo.GenericAliasType
	}{
		A: a,
		B: b,
	}
	mock.lockDo.Lock()
	mock.calls.Do = append(mock.calls.Do, callInfo)
	mock.lockDo.Unlock()
	return mock.DoFunc(a, b)
}

// DoCalls gets all the calls that were made to Do.
// Check the length with:
//
//	len(mockedExample.DoCalls())
func (mock *ExampleMock) DoCalls() []struct {
	A typealiastwo.AliasType
	B typealiastwo.GenericAliasType
} {
	var calls []struct {
		A typealiastwo.AliasType
		B typealiastwo.GenericAliasType
	}
	mock.lockDo.RLock()
	calls = mock.calls.Do
	mock.lockDo.RUnlock()
	return calls
}
