// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package blankid

import (
	"sync"
)

// Ensure, that SwallowerMock does implement Swallower.
// If this is not the case, regenerate this file with moq.
var _ Swallower = &SwallowerMock{}

// SwallowerMock is a mock implementation of Swallower.
//
//     func TestSomethingThatUsesSwallower(t *testing.T) {
//
//         // make and configure a mocked Swallower
//         mockedSwallower := &SwallowerMock{
//             SwallowFunc: func(in1 string)  {
// 	               panic("mock out the Swallow method")
//             },
//         }
//
//         // use mockedSwallower in code that requires Swallower
//         // and then make assertions.
//
//     }
type SwallowerMock struct {
	// SwallowFunc mocks the Swallow method.
	SwallowFunc func(in1 string)

	// calls tracks calls to the methods.
	calls struct {
		// Swallow holds details about calls to the Swallow method.
		Swallow []struct {
			// In1 is the in1 argument value.
			In1 string
		}
	}
	lockSwallow sync.RWMutex
}

// Swallow calls SwallowFunc.
func (mock *SwallowerMock) Swallow(in1 string) {
	if mock.SwallowFunc == nil {
		panic("SwallowerMock.SwallowFunc: method is nil but Swallower.Swallow was just called")
	}
	callInfo := struct {
		In1 string
	}{
		In1: in1,
	}
	mock.lockSwallow.Lock()
	mock.calls.Swallow = append(mock.calls.Swallow, callInfo)
	mock.lockSwallow.Unlock()
	mock.SwallowFunc(in1)
}

// SwallowCalls gets all the calls that were made to Swallow.
// Check the length with:
//     len(mockedSwallower.SwallowCalls())
func (mock *SwallowerMock) SwallowCalls() []struct {
	In1 string
} {
	var calls []struct {
		In1 string
	}
	mock.lockSwallow.RLock()
	calls = mock.calls.Swallow
	mock.lockSwallow.RUnlock()
	return calls
}
